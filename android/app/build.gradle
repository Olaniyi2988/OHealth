def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def neurotechRoot = localProperties.getProperty('neurotech.sdk')
if (neurotechRoot == null) {
    throw new GradleException("Nuerotech SDK not found. Define location with flutter.sdk in the android/local.properties file.")
}
def productBinDir = new File(neurotechRoot, "Bin")
def productBinAndroidDir = new File(productBinDir, "Android")
def productLibAndroidDir = new File(neurotechRoot, "Lib/Android")
def archUsed = "arm64-v8a,armeabi-v7a,x86"

def usedNdfList = ["Fingers.ndf"]

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.centrifuge.kp"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.release
        }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

flutter {
    source '../..'
}

task deleteTemporaryFiles(type: Delete) {
    for (String file : usedNdfList) {
        delete "${android.sourceSets.main.assets.srcDirs[0]}/data/${file}.jet"
    }
    delete "${android.sourceSets.main.jniLibs.srcDirs[0]}"
}

clean {

}

task prepareNdfFiles(type: Copy) {
    from "${productBinDir}/Data"
    includes = usedNdfList
    rename { String fileName ->
        fileName.replace('.ndf', '.ndf.jet')
    }
    into "${android.sourceSets.main.assets.srcDirs[0]}/data"
}

int counter = 1
archUsed.split(',').each {
    String srcDir = "${productLibAndroidDir}/${it}"
    String dstDir = "${android.sourceSets.main.jniLibs.srcDirs[0]}/${it}"
    task "prepareNativeLibs$counter"(type: Copy) {
        from srcDir
        exclude "**/*.Test.so"
        exclude "**/*.IT.so"
        into dstDir
    }
    tasks.preBuild.dependsOn("prepareNativeLibs$counter")
    counter++
}

clean.dependsOn(deleteTemporaryFiles)
prepareNdfFiles.dependsOn(clean)

dependencies {
    implementation ":neurotec-gui-android"
    implementation ":neurotec-media-processing-android"
    implementation ":neurotec-biometrics-android"
    implementation ":neurotec-biometrics-client-android"

    implementation ":neurotec-devices-fscanners-aratek-trustfinger-android"
    implementation ":neurotec-devices-fscanners-suprema-biomini-android"
    implementation ":neurotec-devices-fscanners-ekemp-android"
    implementation ":neurotec-devices-fscanners-bluefin-android"
    implementation ":neurotec-devices-multimodal-credenceid-android"
    implementation ":neurotec-devices-fscanners-digitalpersona-uareu-android"
    implementation ":neurotec-devices-fscanners-futronic-android"
    implementation ":neurotec-devices-fscanners-aratek-android"
    implementation ":neurotec-devices-fscanners-secugen-android"
    implementation ":neurotec-devices-fscanners-integratedbiometrics-android"
    implementation ":neurotec-devices-fscanners-nextbiometrics-android"
    implementation ":neurotec-devices-fscanners-greenbit-android"
    implementation ":neurotec-devices-fscanners-zkteco-android"
    implementation ":neurotec-devices-fscanners-morpho-android"
    implementation ":neurotec-devices-fscanners-bitel-android"
    implementation ":neurotec-devices-fscanners-identos-tactivo-android"
    implementation ":neurotec-devices-irisscanners-iritech-irishield-android"
    implementation ":neurotec-devices-irisscanners-mantra-android"
    implementation ":neurotec-devices-media-android"
    implementation ":neurotec-devices-android"
    implementation(name: 'neurotec-biometrics-gui-android', ext: 'aar')
    implementation project(":tutorials-utils")
}

repositories {
    google()
    jcenter()
    mavenCentral()
    flatDir {
        dirs "${productBinAndroidDir}/"
    }
}
